generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id    Int     @id @default(autoincrement())
    email String  @unique
    name  String?
    votes Vote[]
}

model Event {
    id       Int       @id @default(autoincrement())
    title    String    @unique
    orders   Order[]
    products Product[]
    votes    Vote[]
    bagels   Bagel[]
}

model Product {
    id          Int         @id @default(autoincrement())
    name        String      @unique
    description String?
    price       Float
    event       Event       @relation(fields: [eventId], references: [id])
    eventId     Int
    orderItems  OrderItem[]
}

model Order {
    id         Int         @id @default(autoincrement())
    userEmail  String
    userName   String?
    event      Event       @relation(fields: [eventId], references: [id])
    eventId    Int
    orderItems OrderItem[]
    paid       Float       @default(0)
    exempt     Boolean     @default(false)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model OrderItem {
    id        Int      @id @default(autoincrement())
    quantity  Int
    Product   Product? @relation(fields: [productId], references: [id])
    productId Int
    order     Order?   @relation(fields: [orderId], references: [id])
    orderId   Int
}

model Vote {
    id      Int     @id @default(autoincrement())
    score   Int
    comment String?
    user    User    @relation(fields: [userId], references: [id])
    userId  Int
    event   Event   @relation(fields: [eventId], references: [id])
    eventId Int
    bagel   Bagel   @relation(fields: [bagelId], references: [id])
    bagelId Int
}

model Bagel {
    id      Int    @id @default(autoincrement())
    name    String @unique
    votes   Vote[]
    event   Event  @relation(fields: [eventId], references: [id])
    eventId Int    @default(1)
}
